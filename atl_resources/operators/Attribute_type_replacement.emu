// operator: Attribute.type-REP
// desc: this operator replace the type of Attribute with a 
// another type.
//
// Inherited operators: OclFeature 
////////////////////////////////////////////////////////////

// Sec 1: change the type of Primitive type of an Attribute   
// Impl 1.1: change to string
@action replace
@property type
pattern attribute_type_primitive_change2string
instance:Attribute
	in: Attribute.all.select(e|e.type.isKindOf(Primitive))
	guard: not (instance.type.isTypeOf(StringType)) {
	do { 
		instance.type = StringType.createInstance();
	}
}

// Impl 1.2: change the primitive-type of attribute: to boolean
@action replace
@property type
pattern attribute_type_primitive_change2boolean
instance:Attribute
	in: Attribute.all.select(e|e.type.isKindOf(Primitive))
	guard: not (instance.type.isTypeOf(BooleanType)) {
	do { 
		instance.type = BooleanType.createInstance();
	}
}

// Impl 1.3: change the primitive-type of attribute: to integer
@action replace
@property type
pattern attribute_type_primitive_change2integer
instance:Attribute
	in: Attribute.all.select(e|e.type.isKindOf(Primitive))
	guard: not (instance.type.isTypeOf(IntegerType)) {
	do { 
		instance.type = IntegerType.createInstance();
	}
}

// Impl 1.4: change the primitive-type of attribute: to real
@action replace
@property type
pattern attribute_type_primitive_change2real
instance:Attribute
	in: Attribute.all.select(e|e.type.isKindOf(Primitive))
	guard: not (instance.type.isTypeOf(RealType)) {
	do { 
		instance.type = RealType.createInstance();
	}
}

// Sec 2: change the type of OclModelElement of an Attribute
// to other type: change name
// Impl 2.1: change OclModelElement.name
@action replace
@property type
@role instance
pattern attribute_type_change_name_oclmodelelement
instance:Attribute
	in: Attribute.all.select(e| e.type.isTypeOf(OclModelElement)),
othertype:OclModelElement
	in: OclModelElement.all.select(e| e <> instance.type)
	guard: instance.type.name <> othertype.name {
	do {
		var new_type = OclModelElement.createInstance();
		new_type.name = othertype.name;
		new_type.`model` = instance.type.`model`; 
		instance.type = new_type;
	}
}

// Impl 2.2: change OclModelElement.model
@action replace
@property type
@role instance
pattern attribute_type_change_model_oclmodelelement
instance:Attribute
	in: Attribute.all.select(e| e.type.isTypeOf(OclModelElement)),
othertype:OclModelElement
	in: OclModelElement.all.select(e| e <> instance.type)
	guard: instance.type.`model` <> othertype.`model` {
	do {
		var new_type = OclModelElement.createInstance();
		new_type.name = instance.type.name;
		new_type.`model` = othertype.`model`; 
		instance.type = new_type;
	}
}

// Sec 3: change the type of OCL.Collection of an Attribute
// Impl 3.1: change the collection type to BagType
@action replace
@property type
pattern attribute_type_change_collection2BagType
instance:Attribute
	in: Attribute.all.select(e| e.type.isKindOf(CollectionType))
	guard: not instance.type.isTypeOf(BagType) {
	do {
		var new_type = BagType.createInstance();
		new_type.elementType = instance.type.elementType;
		new_type.attribute = instance.type.attribute;  
		instance.type = new_type;
	}
}

// Impl 3.2: change the collection type to OrderedSetType
@action replace
@property type
pattern attribute_type_change_collection2OrderedSetType
instance:Attribute
	in: Attribute.all.select(e| e.type.isKindOf(CollectionType))
	guard: not instance.type.isTypeOf(OrderedSetType) {
	do {
		var new_type = OrderedSetType.createInstance();
		new_type.elementType = instance.type.elementType;
		new_type.attribute = instance.type.attribute;  
		instance.type = new_type;
	}
}

// Impl 3.3: change the collection type to SequenceType
@action replace
@property type
pattern attribute_type_change_collection2SequenceType
instance:Attribute
	in: Attribute.all.select(e| e.type.isKindOf(CollectionType))
	guard: not instance.type.isTypeOf(SequenceType) {
	do {
		var new_type = SequenceType.createInstance();
		new_type.elementType = instance.type.elementType;
		new_type.attribute = instance.type.attribute;  
		instance.type = new_type;
	}
}

// Impl 3.4: change the collection type to SetType
@action replace
@property type
pattern attribute_type_change_collection2SetType
instance:Attribute
	in: Attribute.all.select(e| e.type.isKindOf(CollectionType))
	guard: not instance.type.isTypeOf(SetType) {
	do {
		var new_type = SetType.createInstance();
		new_type.elementType = instance.type.elementType;
		new_type.attribute = instance.type.attribute;  
		instance.type = new_type;
	}
}