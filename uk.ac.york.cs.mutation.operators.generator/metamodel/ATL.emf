@namespace(uri="http://cs.york.ac.uk/2005/ATLnOCL", prefix="atl_n_ocl")
package atl_n_ocl;

@namespace(uri="http://cs.york.ac.uk/2005/ATL", prefix="atl")

package ATL {
class Module {
	!unique !ordered attr boolean[1] isRefining;
    val OCL.OclModel[+] inModels;
    !ordered val OCL.OclModel[+] outModels;
    val ModuleElement[*] elements;
}

 abstract class ModuleElement {
 }

 class Helper extends ModuleElement {
	!ordered val OCL.OclFeatureDefinition[1] definition;
 }


abstract class Rule extends ModuleElement {
	!ordered val OutPattern outPattern;
	!ordered val ActionBlock actionBlock;
	val RuleVariableDeclaration[*] variables;
	!unique !ordered attr String[1] name;
}

  class MatchedRule extends Rule {
    !ordered val InPattern inPattern;
    !ordered ref MatchedRule[*]#superRule children;
    !ordered ref MatchedRule#children superRule;
    !unique !ordered attr boolean[1] isAbstract;
    !unique !ordered attr boolean[1] isRefining;
    !unique !ordered attr boolean[1] isNoDefault;
  }

  class LazyMatchedRule extends MatchedRule {
    !unique !ordered attr boolean[1] isUnique;
  }

  class CalledRule extends Rule {
    !ordered val OCL.Parameter[*] parameters;
    !unique !ordered attr boolean[1] isEntrypoint;
    !unique !ordered attr boolean[1] isEndpoint;
  }

  class InPattern {
    !ordered val InPatternElement[+] elements;
    !ordered val OCL.OclExpression filter;
  }

  class OutPattern {
    !ordered val DropPattern dropPattern;
    val OutPatternElement[+] elements;
  }

  class DropPattern {
    !ordered ref OutPattern[1] outPattern;
  }

  abstract class PatternElement extends OCL.VariableDeclaration {
  }

  abstract class InPatternElement extends PatternElement {
    !ordered ref OCL.OclModel[*] models;
  }

  class SimpleInPatternElement extends InPatternElement {
  }

  abstract class OutPatternElement extends PatternElement {
    !ordered ref InPatternElement sourceElement;
    val Binding[*] bindings;
    !ordered ref OCL.OclModel model;
  }

  class SimpleOutPatternElement extends OutPatternElement {
    val OCL.OclExpression[*] reverseBindings;
  }

  class ForEachOutPatternElement extends OutPatternElement {
    !ordered val OCL.OclExpression[1] collection;
    !ordered val OCL.Iterator[1] iterator;
  }

  class Binding {
    !ordered val OCL.OclExpression[1] value;
    !unique !ordered attr String[1] propertyName;
    !unique !ordered attr boolean[1] isAssignment;
  }

  class RuleVariableDeclaration extends OCL.VariableDeclaration {
  }

  class ActionBlock {
    val Statement[*] statements;
  }

  abstract class Statement {
  }

  class ExpressionStat extends Statement {
    !ordered val OCL.OclExpression[1] expression;
  }

  class BindingStat extends Statement {
    !ordered val OCL.OclExpression[1] source;
    !unique !ordered attr String[1] propertyName;
    !unique !ordered attr boolean[1] isAssignment;
    !ordered val OCL.OclExpression[1] value;
  }

  class IfStat extends Statement {
    !ordered val OCL.OclExpression[1] condition;
    val Statement[*] thenStatements;
    val Statement[*] elseStatements;
  }

  class ForStat extends Statement {
    !ordered val OCL.Iterator[1] iterator;
    !ordered val OCL.OclExpression[1] collection;
    val Statement[*] statements;
  }

}

@namespace(uri="http://cs.york.ac.uk/2005/OCL", prefix="ocl")
package OCL {
  abstract class OclExpression {
    !ordered val OclType type;
  }

  class VariableExp extends OclExpression {
    !ordered ref VariableDeclaration[1] referredVariable;
  }

  class SuperExp extends OclExpression {
  }

  abstract class PrimitiveExp extends OclExpression {
  }

  class StringExp extends PrimitiveExp {
    !unique !ordered attr String[1] stringSymbol;
  }

  class BooleanExp extends PrimitiveExp {
    !unique !ordered attr boolean[1] booleanSymbol;
  }

  abstract class NumericExp extends PrimitiveExp {
  }

  class RealExp extends NumericExp {
    !unique !ordered attr double[1] realSymbol;
  }

  class IntegerExp extends NumericExp {
    !unique !ordered attr int[1] integerSymbol;
  }

  abstract class CollectionExp extends OclExpression {
    val OclExpression[*] elements;
  }

  class BagExp extends CollectionExp {
  }

  class OrderedSetExp extends CollectionExp {
  }

  class SequenceExp extends CollectionExp {
  }

  class SetExp extends CollectionExp {
  }

  class TupleExp extends OclExpression {
    val TuplePart[*] tuplePart;
  }

  class TuplePart extends VariableDeclaration {
    !ordered ref TupleExp[1] tuple;
  }

  class MapExp extends OclExpression {
    val MapElement[*] elements;
  }

  class MapElement {
    !ordered val OclExpression[1] key;
    !ordered val OclExpression[1] value;
  }

  class EnumLiteralExp extends OclExpression {
    !unique !ordered attr String[1] name;
  }

  class OclUndefinedExp extends OclExpression {
  }

  abstract class PropertyCallExp extends OclExpression {
    !ordered val OclExpression[1] source;
  }

  class NavigationOrAttributeCallExp extends PropertyCallExp {
    !unique !ordered attr String[1] name;
  }

  class OperationCallExp extends PropertyCallExp {
    val OclExpression[*] arguments;
    !unique !ordered attr String[1] operationName;
  }

  class OperatorCallExp extends OperationCallExp {
  }

  class CollectionOperationCallExp extends OperationCallExp {
  }

  abstract class LoopExp extends PropertyCallExp {
    !ordered val OclExpression[1] body;
    !ordered val Iterator[+] iterators;
  }

  class IterateExp extends LoopExp {
    !ordered val VariableDeclaration[1] result;
  }

  class IteratorExp extends LoopExp {
    !unique !ordered attr String[1] name;
  }

  class LetExp extends OclExpression {
    !ordered val VariableDeclaration[1] variable;
    !ordered val OclExpression[1] in_;
  }

  class IfExp extends OclExpression {
    !ordered val OclExpression[1] thenExpression;
    !ordered val OclExpression[1] condition;
    !ordered val OclExpression[1] elseExpression;
  }

  class VariableDeclaration {
    !unique !ordered attr String ~id;
    !unique !ordered attr String[1] varName;
    !ordered val OclType type;
    !ordered val OclExpression initExpression;
  }

  class Iterator extends VariableDeclaration {
  }

  class Parameter extends VariableDeclaration {
  }

  class CollectionType extends OclType {
    !ordered val OclType[1] elementType;
  }

  class OclType extends OclExpression {
    !unique !ordered attr String[1] name;
  }

  abstract class Primitive extends OclType {
  }

  class StringType extends Primitive {
  }

  class BooleanType extends Primitive {
  }

  abstract class NumericType extends Primitive {
  }

  class IntegerType extends NumericType {
  }

  class RealType extends NumericType {
  }

  class BagType extends CollectionType {
  }

  class OrderedSetType extends CollectionType {
  }

  class SequenceType extends CollectionType {
  }

  class SetType extends CollectionType {
  }

  class OclAnyType extends OclType {
  }

  class TupleType extends OclType {
    val TupleTypeAttribute[*] attributes;
  }

  class TupleTypeAttribute {
    !ordered val OclType[1] type;
    !unique !ordered attr String[1] name;
  }

  class OclModelElement extends OclType {
  }

  class MapType extends OclType {
    !ordered val OclType[1] valueType;
    !ordered val OclType[1] keyType;
  }

  class OclFeatureDefinition {
    !ordered val OclFeature[1] feature;
    !ordered val OclContextDefinition context_;
  }

  class OclContextDefinition {
    !ordered val OclType[1] context_;
  }

  abstract class OclFeature {
  }

  class Attribute extends OclFeature {
    !unique !ordered attr String[1] name;
    !ordered val OclExpression[1] initExpression;
    !ordered val OclType[1] type;
  }

  class Operation extends OclFeature {
    !unique !ordered attr String[1] name;
    val Parameter[*] parameters;
    !ordered val OclType[1] returnType;
    !ordered val OclExpression[1] body;
  }

  class OclModel {
    !unique !ordered attr String[1] name;
    !ordered ref OclModel[1] metamodel;
    !ordered ref OclModelElement[*] elements;
    !ordered ref OclModel[*] model;
  }

}

